#!/usr/bin/env ruby
$:.unshift __dir__ + '/../../lib'
require 'hanami/cli'

module MyCLI
  class Commands
    extend Hanami::Cli::Registry
  end
end

module Foo
  class Cli
    class Hello < Hanami::Cli::Command
      def call(*)
      end
    end

    class Version < Hanami::Cli::Command
      def call(*)
        puts "v1.0.0"
      end
    end

    class Server < Hanami::Cli::Command
      desc 'Starts a hanami server'

      option :port, alias: '-p', desc: 'The port to run the server on'
      option :server
      option :host
      option :code_reloading, type: :boolean, default: true

      def call(options)
        puts "Server: #{options}"
      end
    end

    class New < Hanami::Cli::Command
      desc 'Creates a new hanami project'

      argument :project_name, required: true

      def call(project_name:, **options)
        puts "New: #{options} - project_name: #{project_name}"
      end
    end

    module Destroy
      class Action < Hanami::Cli::Command
        argument :application_name, required: true
        argument :controller_name__action_name, required: true, label: "CONTROLLER_NAME#ACTION_NAME"
        option :url
        option :skip_view, type: :boolean, default: false

        def call(application_name:, controller_name__action_name:, **options)
          puts "destroy action: #{options} - application_name: #{application_name} - controller_name__action_name: #{controller_name__action_name}"
        end
      end
    end

    module Generate
      class Model < Hanami::Cli::Command
        desc 'Generate an entity'

        argument :model_name, required: true
        option :database, alias: '-d', desc: 'The target database'

        def call(model_name:, **options)
          puts "generated model: #{options} - model_name: #{model_name}"
        end
      end

      class Secret < Hanami::Cli::Command
        argument :app

        def call(app:, **)
          puts "generate secret: - app: #{app}"
        end
      end

      class Action < Hanami::Cli::Command
        def call(*)
        end
      end
    end
  end
end

module Webpack
  module Commands
    class Hi < Hanami::Cli::Command
      def call(*)
        puts "world"
      end
    end

    module Generate
      class Configuration < Hanami::Cli::Command
        def call(*)
          puts "generated configuration"
        end
      end

      class Action < Hanami::Cli::Command
        desc 'Generate an action'

        def call(*)
          puts "generated action"
        end
      end

      module Application
        class New < Hanami::Cli::Command
          desc 'Generate an application'

          def call(options)
            puts "generated application new: #{options}"
          end
        end
      end
    end
  end
end

MyCLI::Commands.register "hello",          Foo::Cli::Hello
MyCLI::Commands.register "version",        Foo::Cli::Version, aliases: ["--version", "-v", "v"]
MyCLI::Commands.register "server",         Foo::Cli::Server
MyCLI::Commands.register "new",            Foo::Cli::New
MyCLI::Commands.register "destroy action", Foo::Cli::Destroy::Action

MyCLI::Commands.register "generate", aliases: ["g"] do |prefix|
  prefix.register "model",  Foo::Cli::Generate::Model
  prefix.register "secret", Foo::Cli::Generate::Secret
  prefix.register "action", Foo::Cli::Generate::Action
end

MyCLI::Commands.register "hello",                    Webpack::Commands::Hi
MyCLI::Commands.register "generate webpack",         Webpack::Commands::Generate::Configuration
MyCLI::Commands.register "generate action",          Webpack::Commands::Generate::Action
MyCLI::Commands.register "generate application new", Webpack::Commands::Generate::Application::New

cli = Hanami::Cli.new(MyCLI::Commands)
cli.call
